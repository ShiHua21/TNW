/*
 * This file is generated by jOOQ.
*/
package com.jic.tnw.db.mysql.tables;


import com.jic.tnw.db.converter.LocalDateTimeConverter1;
import com.jic.tnw.db.mysql.Indexes;
import com.jic.tnw.db.mysql.Keys;
import com.jic.tnw.db.mysql.Tnw;
import com.jic.tnw.db.mysql.enums.TasksStatus;
import com.jic.tnw.db.mysql.tables.records.TasksRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * ???
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tasks extends TableImpl<TasksRecord> {

    private static final long serialVersionUID = -654303609;

    /**
     * The reference instance of <code>TNW.tasks</code>
     */
    public static final Tasks TASKS = new Tasks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TasksRecord> getRecordType() {
        return TasksRecord.class;
    }

    /**
     * The column <code>TNW.tasks.id</code>.
     */
    public final TableField<TasksRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>TNW.tasks.name</code>. ????
     */
    public final TableField<TasksRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "????");

    /**
     * The column <code>TNW.tasks.begin_time</code>. ????
     */
    public final TableField<TasksRecord, LocalDateTime> BEGIN_TIME = createField("begin_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "????", new LocalDateTimeConverter1());

    /**
     * The column <code>TNW.tasks.end_time</code>. ????
     */
    public final TableField<TasksRecord, LocalDateTime> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "????", new LocalDateTimeConverter1());

    /**
     * The column <code>TNW.tasks.elapsed</code>. ????,??:??
     */
    public final TableField<TasksRecord, Long> ELAPSED = createField("elapsed", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "????,??:??");

    /**
     * The column <code>TNW.tasks.trigged_user_name</code>. ???????(??????:scheduled)
     */
    public final TableField<TasksRecord, String> TRIGGED_USER_NAME = createField("trigged_user_name", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "???????(??????:scheduled)");

    /**
     * The column <code>TNW.tasks.status</code>. ????
     */
    public final TableField<TasksRecord, TasksStatus> STATUS = createField("status", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(com.jic.tnw.db.mysql.enums.TasksStatus.class), this, "????");

    /**
     * The column <code>TNW.tasks.result</code>. ????(json??)
     */
    public final TableField<TasksRecord, String> RESULT = createField("result", org.jooq.impl.SQLDataType.CLOB, this, "????(json??)");

    /**
     * Create a <code>TNW.tasks</code> table reference
     */
    public Tasks() {
        this(DSL.name("tasks"), null);
    }

    /**
     * Create an aliased <code>TNW.tasks</code> table reference
     */
    public Tasks(String alias) {
        this(DSL.name(alias), TASKS);
    }

    /**
     * Create an aliased <code>TNW.tasks</code> table reference
     */
    public Tasks(Name alias) {
        this(alias, TASKS);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tasks(Name alias, Table<TasksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "???");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Tnw.TNW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASKS_PRIMARY, Indexes.TASKS_TASKS_NAME_INDEX, Indexes.TASKS_TASKS_STATUS_INDEX, Indexes.TASKS_TASKS_TRIGGED_USER_NAME_INDEX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TasksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TASKS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TasksRecord> getPrimaryKey() {
        return Keys.KEY_TASKS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TasksRecord>> getKeys() {
        return Arrays.<UniqueKey<TasksRecord>>asList(Keys.KEY_TASKS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tasks as(String alias) {
        return new Tasks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tasks as(Name alias) {
        return new Tasks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(String name) {
        return new Tasks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tasks rename(Name name) {
        return new Tasks(name, null);
    }
}
