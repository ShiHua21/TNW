/*
 * This file is generated by jOOQ.
*/
package com.jic.tnw.db.mysql.tables;


import com.jic.tnw.db.converter.LocalDateTimeConverter1;
import com.jic.tnw.db.mysql.Indexes;
import com.jic.tnw.db.mysql.Keys;
import com.jic.tnw.db.mysql.Tnw;
import com.jic.tnw.db.mysql.tables.records.LogRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * ???????
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Log extends TableImpl<LogRecord> {

    private static final long serialVersionUID = -1462810665;

    /**
     * The reference instance of <code>TNW.log</code>
     */
    public static final Log LOG = new Log();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogRecord> getRecordType() {
        return LogRecord.class;
    }

    /**
     * The column <code>TNW.log.id</code>. ????ID
     */
    public final TableField<LogRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "????ID");

    /**
     * The column <code>TNW.log.user_id</code>. ???ID
     */
    public final TableField<LogRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "???ID");

    /**
     * The column <code>TNW.log.module</code>. ??????
     */
    public final TableField<LogRecord, String> MODULE = createField("module", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "??????");

    /**
     * The column <code>TNW.log.action</code>. ????????
     */
    public final TableField<LogRecord, String> ACTION = createField("action", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "????????");

    /**
     * The column <code>TNW.log.message</code>. ????
     */
    public final TableField<LogRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "????");

    /**
     * The column <code>TNW.log.data</code>. ????
     */
    public final TableField<LogRecord, String> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "????");

    /**
     * The column <code>TNW.log.ip</code>. ????IP
     */
    public final TableField<LogRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "????IP");

    /**
     * The column <code>TNW.log.created_time</code>. ??????
     */
    public final TableField<LogRecord, LocalDateTime> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "??????", new LocalDateTimeConverter1());

    /**
     * The column <code>TNW.log.level</code>. ????
     */
    public final TableField<LogRecord, String> LEVEL = createField("level", org.jooq.impl.SQLDataType.CHAR(10).nullable(false), this, "????");

    /**
     * Create a <code>TNW.log</code> table reference
     */
    public Log() {
        this(DSL.name("log"), null);
    }

    /**
     * Create an aliased <code>TNW.log</code> table reference
     */
    public Log(String alias) {
        this(DSL.name(alias), LOG);
    }

    /**
     * Create an aliased <code>TNW.log</code> table reference
     */
    public Log(Name alias) {
        this(alias, LOG);
    }

    private Log(Name alias, Table<LogRecord> aliased) {
        this(alias, aliased, null);
    }

    private Log(Name alias, Table<LogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "???????");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Tnw.TNW;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOG_PRIMARY, Indexes.LOG_USERID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LogRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LogRecord> getPrimaryKey() {
        return Keys.KEY_LOG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LogRecord>> getKeys() {
        return Arrays.<UniqueKey<LogRecord>>asList(Keys.KEY_LOG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Log as(String alias) {
        return new Log(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Log as(Name alias) {
        return new Log(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(String name) {
        return new Log(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Log rename(Name name) {
        return new Log(name, null);
    }
}
